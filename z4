import java.util.ArrayList;
import java.util.Objects;
import java.util.Scanner;
import static java.lang.Integer.parseInt;
import static java.lang.Math.cos;

import java.lang.String;
public class z4 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);//2*(3-2)-6=4
        System.out.println("Введите количество примеров");
        int n = scanner.nextInt();
        while (n<11){
            System.out.println("Вы ввели  недостаточно большое число");
            n= scanner.nextInt();
        }
        System.out.println("Как предпочитаете производить ввод? \n1-по столбцам\n2-по строкам");
        int m = scanner.nextInt();
        String [][] primer= new String[n][n];
        if (m==1){
            for (int i = 0;i<n;i++){
                System.out.println("Пример "+(i+1));
                for (int j = 0;j<n;j++){
                    primer[i][j] = scanner.next();
                }
            }
        }
        else {
            for (int i = 0;i<n;i++){
                System.out.println("Пример "+(i+1));
                for (int j = 0;j<n;j++) {
                    primer[j][i] = scanner.next();
                }
            }
        }
        int cnt = 0;
        ArrayList<String> ArrayList = new ArrayList<>();
        for (int i = 0; i < n; i++) {

            //строка
            if (cifra(primer[i][0]) & cifra(primer[i][3]) & cifra(primer[i][5]) & cifra(primer[i][8])
                    & Objects.equals(primer[i][1], "*") & Objects.equals(primer[i][2], "(") &
                    (Objects.equals(primer[i][4], "+") || Objects.equals(primer[i][4], "-"))
                    & Objects.equals(primer[i][6], ")") & Objects.equals(primer[i][7], "-")& Objects.equals(primer[i][9], "=")) {
                strokaprint(primer, i);
                if (schetSTR(primer, i)) {

                    cnt++;
                } else {
                    primer_to_Arr_STR(primer, ArrayList, i);
                }

                //столбец
            } else if (cifra(primer[0][i]) & cifra(primer[3][i]) & cifra(primer[5][i]) & cifra(primer[8][i])
                    & Objects.equals(primer[1][i], "*") & Objects.equals(primer[2][i], "(") & (Objects.equals(primer[4][i], "+") ||
                    Objects.equals(primer[4][i], "-")) & Objects.equals(primer[6][i], ")") &
                    Objects.equals(primer[7][i], "-") & Objects.equals(primer[i][9], "=")) {
                stolbecprint(primer, i);
                if (schetSTOLBEC(primer, i)) {
                    cnt++;
                } else {
                    primer_to_Arr_STOL(primer, ArrayList, i);
                }
            }
        }
        System.out.println("Количество верных решений " + cnt + "\nИсправленные решения:" + "\n");
        printArr(ArrayList);
    }

    public static boolean cifra(String m) {
        if (m == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(m);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    private static boolean schetSTR(String[][] m, int o) {
        int i = 11;
        while (i != m.length) {
            for (i = 8; i < m.length; i++) {
                if (Objects.equals(m[o][4], "-")) {
                    if (parseInt(m[o][0]) * (cos(parseInt(m[o][3])) - parseInt(m[o][5]))-parseInt(m[o][8]) == parseInt(m[o][i])) {
                        return true;
                    }
                } else if (Objects.equals(m[o][4], "+")) {
                    if (parseInt(m[o][0]) * (cos(parseInt(m[o][3])) + parseInt(m[o][5]))-parseInt(m[o][8]) == parseInt(m[o][i])) {
                        return true;
                    }
                }
            }
            return false;
        }
        return false;
    }

    private static boolean schetSTOLBEC(String[][] m, int o) {
        int i = 11;
        while (i != m.length) {
            for (i = 8; i < m.length; i++) {
                if (Objects.equals(m[4][o], "-")) {
                    if (parseInt(m[0][o]) * (cos(parseInt(m[3][o])) - parseInt(m[5][o]))-parseInt(m[8][o]) == parseInt(m[i][o])) {
                        return true;
                    }
                } else if (Objects.equals(m[4][o], "+")) {
                    if (parseInt(m[0][o]) * (cos(parseInt(m[3][o])) + parseInt(m[5][o]))-parseInt(m[8][o]) == parseInt(m[i][o])) {
                        return true;
                    }
                }
            }
            return false;
        }
        return false;
    }

    public static void strokaprint(String[][] m, int p) {
        for (int i = 0; i < m.length; i++) {
            System.out.print(m[p][i] + "\t");
        }
        System.out.println("");
    }
    public static void stolbecprint(String[][] m, int p) {
        for (int i = 0; i < m[0].length; i++) {
            System.out.print(m[i][p] + "\t");
        }
        System.out.println("");
    }
    public static void primer_to_Arr_STR(String[][] m, ArrayList<String> kik, int p) {
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < 11; i++) {
            if (i == 10) {
                if (Objects.equals(m[p][4], "-")) {
                    str.append(String.valueOf(parseInt(m[p][0]) * (cos(parseInt(m[p][3])) - parseInt(m[p][5]))-parseInt(m[p][8])));
                } else if (Objects.equals(m[p][4], "+")) {
                    str.append(String.valueOf(parseInt(m[p][0]) * (cos(parseInt(m[p][3])) + parseInt(m[p][5]))-parseInt(m[p][8])));
                }
            } else {
                str.append(m[p][i]);
            }
        }
        kik.add(String.valueOf(str));
    }
    public static void primer_to_Arr_STOL(String[][] m, ArrayList<String> kik, int p) {
        StringBuilder arr= new StringBuilder();
        for (int i = 0; i < 11; i++) {
            if (i == 10) {
                if (Objects.equals(m[4][p], "-")) {
                    kik.add(String.valueOf(parseInt(m[0][p]) * (cos(parseInt(m[3][p])) - parseInt(m[5][p]))-parseInt(m[8][p])));
                } else if (Objects.equals(m[4][p], "+")) {
                    kik.add(String.valueOf(parseInt(m[0][p]) * (cos(parseInt(m[3][p])) + parseInt(m[5][p]))-parseInt(m[8][p])));
                }
            } else {
                arr.append(m[i][p]);
            }
        }
    }
    public static void printArr(ArrayList<String> ar) {
        for (String i:ar){
            System.out.println(i);
        }
    }
} 
